I have used a HashSet to implement the question, because it allows to erform the insert and remove uery both in O(1) time.
Now coming to the getRandom() query.
Using the Math.random() function, i have generated a reandom index which is to be returned from our set.
Then just iterate over the set till the required index and then return the element.
Yes, this will not be an O(1) operation. But because the average complexity all 3 functions is very less, the solution gets accepted.

Solution:

class RandomizedSet {
    
    HashSet<Integer> set;
    /** Initialize your data structure here. */
    public RandomizedSet() {
        set=new HashSet<Integer>();
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    public boolean insert(int val) {
        if(set.contains(val)) return false;
        else
        {
            set.add(val);
            return true;
        }
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    public boolean remove(int val) {
        if(set.contains(val))
        {
            set.remove(val);
            return true;
        }
        else return false;
    }
    
    /** Get a random element from the set. */
    public int getRandom() {
        int index=(int)(Math.random()*set.size())-1;
        int counter=0;
        int val=0;
        for(int k:set)
        {
            val=k;
            if(counter==index) break;
            counter++;
        }
        return val;
    }
}
