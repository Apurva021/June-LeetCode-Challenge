In this problem we have to find the number of 'combinations' in which we can make change for given 'amount' from available coins.
We have an infinite supply of all the types of coins available.

This is a standard problem and can be solved using dynamic programming.
Let us make a 2-d array dp[][].
Here dp[i][j]--> number of combinations to make change for amount 'j' using the first 'i' types of coin.

Keeping the above definition in mind 
dp[0][0]=1 (there is only one way to create change for amount 0)

Then we just need to follow the below transition
dp[i][j]=dp[i-1][j]+dp[i][j-coins[i]]
Here, dp[i-1][j] implies combinations to make change of 'j' using the first 'i-1' coins
      dp[i][j-coins[i]] implies combinations to make chage for 'j-coins[i]' using the first 'i' coins.
Adding the above both terms we number of ways to make change for amount 'j' using the first 'i' coins that is dp[i][j].


Soution:
class Solution {
    public int change(int amount, int[] coins) {
        int n=coins.length;
        int dp[][]=new int[n+1][amount+1];
        dp[0][0]=1;
        for(int i=1;i<=n;++i)
        {
            for(int j=0;j<=amount;++j)
            {
                if(j-coins[i-1]>=0) dp[i][j]=dp[i-1][j]+dp[i][j-coins[i-1]];
                else dp[i][j]=dp[i-1][j];
            }
            
        }
        return dp[n][amount];
    }
}
