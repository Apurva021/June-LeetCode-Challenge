This question same as finding the index of the upper bound of the given target in a sorted array.
Finding the upper bound in a sorted array is an application of binary search.

Let us initialize 2 pointers 'left' and 'right'.
We initialize the 'ans' with n. (Where n is the size of the array).
Now while left<right we will check the middle element.
If the middle element is equal to target we just return the index.
If the middle element is greater than the target, it means the target can be present before it, or has to be inserted at that position. So
we change ans=mid and right=middle-1.
If the middle element is less than target, it implies the target element must be present after the middle. So we change l=middle+1.

Solution:
class Solution {
    public int searchInsert(int[] nums, int target) {
        int l=0,r=nums.length-1;
        int ans=nums.length;
        while(l<=r)
        {
            int mid=(l+r)/2;
            if(nums[mid]==target)
            {
                ans=mid;
                return ans;
            }
            else if(nums[mid]>target)
            {
                ans=mid;
                r=mid-1;
            }
            else l=mid+1;
        }
        return ans;
    }
}

